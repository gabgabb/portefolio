name: CI Test for PRs

on:
    pull_request:
        branches:
            - main

jobs:
    test:
        runs-on: ubuntu-latest

        steps:
            -   name: Checkout code
                uses: actions/checkout@v4

            -   name: Set up Docker Buildx
                uses: docker/setup-buildx-action@v3

            -   name: Create missing .env files
                run: |
                    cp .env.dist .env
                    cp nextjs/.env.dist nextjs/.env
                    cp strapi/.env.dist strapi/.env
                    
                    STRAPI_TOKEN=09b10af59728b9a78707fea42ca3df24f041b40df2c7aec397179ad07ef48a621c62c802359d95e2075f837229c6849d1eeb09ebd3fdbe421321bb48fa8496490c9a7af8471199bb6ee3a248ac2c08b62a5e8944784b62bf9ebae598210152fa1c32d483976e9adb0a5ef9bb371cfe06395b129e9c973c923693932ee010f790
                    sed -i "s|NEXT_PUBLIC_STRAPI_TOKEN=.*|NEXT_PUBLIC_STRAPI_TOKEN=$STRAPI_TOKEN|" nextjs/.env
                                       
                    echo "APP_KEYS=$(node -e "console.log(require('crypto').randomBytes(32).toString('base64'))"),$(node -e "console.log(require('crypto').randomBytes(32).toString('base64'))")" >> strapi/.env
                    echo "API_TOKEN=$(node -e "console.log(require('crypto').randomBytes(16).toString('base64'))")" >> strapi/.env
                    echo "API_TOKEN_SALT=$(node -e "console.log(require('crypto').randomBytes(16).toString('base64'))")" >> strapi/.env
                    echo "ADMIN_JWT_SECRET=$(node -e "console.log(require('crypto').randomBytes(16).toString('base64'))")" >> strapi/.env
                    echo "TRANSFER_TOKEN_SALT=$(node -e "console.log(require('crypto').randomBytes(16).toString('base64'))")" >> strapi/.env
                    echo "JWT_SECRET=$(node -e "console.log(require('crypto').randomBytes(16).toString('base64'))")" >> strapi/.env
                    
                    cat nextjs/.env

            -   name: Install dependencies
                run: |
                    corepack enable
                    corepack prepare yarn@stable --activate
                    cd nextjs
                    yarn install
                    npx playwright install
                    cd ../strapi
                    npm install

            -   name: Build Docker images
                run: |
                    docker build -t portefolio-nextjs -f docker/nextjs/Dockerfile .
                    docker build -t portefolio-strapi -f docker/strapi/Dockerfile .

            -   name: Start services with local images
                run: docker compose -f compose.ci.yml up -d

            -   name: Wait for services to be ready
                run: |
                    sleep 60
                    docker ps -a

            -   name: Check Strapi Logs
                run: docker logs portefolio-strapi-1

            -   name: Test Strapi API Connection
                run: |
                    sleep 10  # Attendre un peu plus longtemps si Strapi met du temps à démarrer
                    curl -i http://localhost:1337/api/

            -   name: Test Strapi API with Token
                run: |
                  curl -i -H "Authorization: Bearer $STRAPI_TOKEN" http://localhost:1337/api/

            -   name: Run Playwright tests inside Next.js container
                id: tests
                run: |
                    mkdir -p test-results
                    docker exec portefolio-nextjs-1 npx playwright test || TEST_FAILED=true
                    
                    # Toujours essayer de copier le fichier de rapport Playwright
                    docker cp portefolio-nextjs-1:/app/ctrf/ctrf-report.json test-results/ || echo '{}' > test-results/ctrf-report.json
                    
                    # Stocker le statut d'échec pour plus tard
                    if [ "$TEST_FAILED" = true ]; then
                      echo "TEST_FAILED=true" >> $GITHUB_ENV
                    fi

            -   name: Publish Test Summary Results
                if: always()  # S'exécute même si les tests échouent
                run: |
                    if [ -f "test-results/ctrf-report.json" ]; then
                      npx github-actions-ctrf test-results/ctrf-report.json
                    else
                      echo "⚠️ Aucun fichier de résultats trouvé, skipping..."
                    fi          

            -   name: Fail if tests failed
                if: env.TEST_FAILED == 'true'
                run: exit 1


            -   name: Stop and clean up
                if: always()
                run: |
                    docker compose -f compose.ci.yml down -v

    auto-approve:
        needs: test
        runs-on: ubuntu-latest
        if: github.actor == 'renovate[bot]'
        steps:
            -   name: Checkout code
                uses: actions/checkout@v4

            -   name: Auto-approve PR
                uses: hmarr/auto-approve-action@v4
                with:
                    github-token: ${{ secrets.GH_PAT }}

    auto-merge:
        needs: auto-approve
        runs-on: ubuntu-latest
        if: github.actor == 'renovate[bot]'
        steps:
            -   name: Checkout code
                uses: actions/checkout@v4

            -   name: Enable auto-merge for Renovate PRs
                run: gh pr merge --auto --squash "$GITHUB_HEAD_REF"
                env:
                    GH_TOKEN: ${{ secrets.GH_PAT }}
